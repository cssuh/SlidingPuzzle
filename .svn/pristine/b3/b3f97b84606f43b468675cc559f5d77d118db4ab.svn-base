package edu.wm.cs.cs301.slidingpuzzle;

import java.util.Arrays;
import static java.lang.Math.sqrt;

public class SimplePuzzleState implements PuzzleState {

	private int dimension;
	private int empties;
	private int[] board;
	private PuzzleState parent;
	private Operation operation;
	private int pathLength;
	
	
	SimplePuzzleState(int[] newBoard){
		dimension = 0;
		empties = 0;
		board = newBoard;
		parent = null;
		operation = null;
		pathLength = 0;
	}
	
	SimplePuzzleState(){
		dimension = 0;
		empties = 0;
		board = null;
		parent = null;
		operation = null;
		pathLength = 0;
	}
	
	public boolean checkInitialState(int dimension, int empties){
		// this method was created to check if the board is in the initial state
		
		int i;
		int filledBoxes;
		
		filledBoxes = dimension * dimension - empties;
		
		for(i = 0; i < filledBoxes; i++){
			if(this.board[i] != i + 1){
				return false;
			}
		}
		for(i = 0; i < empties; i++){
			if(this.board[i + filledBoxes] != 0){
				return false;
			}
		}
		return true;
	}
	

	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(board);
		result = prime * result + dimension;
		result = prime * result + empties;
		result = prime * result + ((operation == null) ? 0 : operation.hashCode());
		result = prime * result + ((parent == null) ? 0 : parent.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		// see if two puzzle states are equal to each other
		
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SimplePuzzleState other = (SimplePuzzleState) obj;
		if (!Arrays.equals(board, other.board))
			return false;
		
		return true;
	}

	@Override
	public void setToInitialState(int dimension, int numberOfEmptySlots) {
		//need to set object that can be changed in this method
		this.dimension = dimension;
		this.empties = numberOfEmptySlots;
		this.board = new int[dimension * dimension];
		int i;
		int filledBoxes;
		
		filledBoxes = dimension * dimension - numberOfEmptySlots;
		
		for(i = 0; i < filledBoxes; i++){
			this.board[i] = i + 1;
		}
		
		for(i = 0; i < numberOfEmptySlots; i++){
			this.board[i + filledBoxes] = 0;
		}
	}

	@Override
	public int getValue(int row, int column) {
		int index;
		int value;
		
		index = row * dimension + column;
		value = board[index];
		return value;
	}

	@Override
	public PuzzleState getParent() {
		return this.parent;
	}

	@Override
	public Operation getOperation() {
			return operation;
	}

	@Override
	public int getPathLength() {
		return this.pathLength;
	}

	@Override
	public PuzzleState move(int row, int column, Operation op) {
		// TODO Auto-generated method stub
		// first check if it is possible to move a tile from the given position in the given 
		// direction. if it is possible, return a new instance of PuzzleState where the 
		//parent state is set to this object. if move is not possible, return null
		
		int value;
		int index;
		int indexEmptyCheck;
		int temp;
		int i;
		
		value = getValue(row, column);
		index = row * dimension + column;
		SimplePuzzleState state = new SimplePuzzleState();
		state.dimension = this.dimension;
		state.empties = this.empties;
		state.board = new int[dimension * dimension];
		for (i =0; i < dimension * dimension; i++){
			state.board[i] = this.board[i];
		}
		
		if (op == Operation.MOVERIGHT){
			if (isEmpty(row, column + 1) == true){
				state.parent = this;
				state.operation = op;
				state.pathLength = this.pathLength;
				//also sets the distance from the initial state for the returned state...?
				
				temp = state.board[index];
				state.board[index] = state.board[index + 1];
				state.board[index + 1] = temp;
				state.pathLength += 1;
				return state;
			}
			else{
				return null;
			}
		}
		
		else if (op == Operation.MOVELEFT){
			if (isEmpty(row, column - 1) == true){
				state.parent = this;
				state.operation = op;
				state.pathLength = this.pathLength;
				//also sets the distance from the initial state for the returned state...?
				
				temp = state.board[index];
				state.board[index] = state.board[index - 1];
				state.board[index - 1] = temp;
				state.pathLength += 1;
				return state;
			}
			else{
				return null;
			}
			
		}
		
		else if (op == Operation.MOVEUP){
			if (isEmpty(row - 1, column) == true){
				state.parent = this;
				state.operation = op;
				state.pathLength = this.pathLength;
				//also sets the distance from the initial state for the returned state...?
				
				temp = state.board[index];
				state.board[index] = state.board[index - dimension];
				state.board[index - dimension] = temp;
				state.pathLength += 1;
				return state;
			}
			else{
				return null;
			}
			
		}
		
		else if (op == Operation.MOVEDOWN){
			if (isEmpty(row + 1, column) == true){
				state.parent = this;
				state.operation = op;
				state.pathLength = this.pathLength;
				//also sets the distance from the initial state for the returned state...?
				
				temp = state.board[index];
				state.board[index] = state.board[index + dimension];
				state.board[index + dimension] = temp;
				state.pathLength += 1;
				return state;
			}
			else{
				return null;
			}
			
		}
				
		// add parent and previous operation to tuple containing path from initial state
		return null;
	}

	@Override
	public PuzzleState flip(int startRow, int startColumn, int endRow, int endColumn) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PuzzleState shuffleBoard(int pathLength) {
		// TODO Auto-generated method stub
		// shuffles the board to create a new game for the user
		// need to create move operation before this one can be created
		
		int i;
		
		for (i = 0; i < pathLength; i++){
			
		}
		
		return null;
	}

	@Override
	public boolean isEmpty(int row, int column) {
		int index;
		index = row * dimension + column;
		
		//special conditions for array out of bounds exception
		if (index < 0){
			return false;
		}
		//special conditions for array out of bounds exception
		else if (index > dimension * dimension - 1){
			return false;
		}
		else if (board[index] == 0){
			return true;
		}
		else{
			return false;
		}
	}
}
